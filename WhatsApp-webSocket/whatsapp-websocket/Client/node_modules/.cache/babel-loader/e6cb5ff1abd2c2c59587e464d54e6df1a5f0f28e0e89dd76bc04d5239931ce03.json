{"ast":null,"code":"var _jsxFileName = \"/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/Components/context/ConversationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport LocalStorage from \"../Hooks/LocalStorage\";\nimport { useContact } from \"./ContactsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConversationContext = /*#__PURE__*/createContext();\nexport function useConversation() {\n  _s();\n  return useContext(ConversationContext);\n}\n_s(useConversation, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ConversationProvider({\n  children,\n  id\n}) {\n  _s2();\n  const [conversation, setConverstaion] = LocalStorage('conversation', []);\n  const [selectConversationIndex, setSelectConversationIndex] = useState(0);\n  const {\n    contact\n  } = useContact();\n  function createConversation(recipients) {\n    setConverstaion(prevconversation => {\n      return [...prevconversation, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  //Now we can format our conversation into easy manner \n  //As we know conversation has stored the group of recipeints ids \n  //First wee need to iterate the conversatinon and inside we need to iterate the recipuents and after we need to find the matching\n  //recipient id with contacts information we have \n\n  const formattedConversations = conversation.map((conversation, index) => {\n    // For each conversation, process its recipients\n    const recipients = conversation.recipients.map(recipientId => {\n      // Find the contact that matches this recipient ID\n      const foundContact = contact.find(contact => contact.id === recipientId);\n\n      // If contact found, use its name, otherwise use the ID as fallback\n      return {\n        id: recipientId,\n        name: foundContact ? foundContact.name : recipientId\n      };\n    });\n\n    //And also See this Current Conversation is selected \n    const selected = index === selectConversationIndex;\n\n    // Return a new conversation object with formatted recipients\n    return {\n      ...conversation,\n      // Keep existing conversation properties\n      recipients,\n      // Add formatted recipients array\n      selected //If this Conversation is selected\n    };\n  });\n  const value = {\n    conversation: formattedConversations,\n    currentConversation: formattedConversations[selectConversationIndex],\n    //To Track the current conversatoin we are doing this \n    selectConversationIndex: setSelectConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s2(ConversationProvider, \"n1Hi0v5gKG8aS54f1s7KxN9l20A=\", false, function () {\n  return [useContact];\n});\n_c = ConversationProvider;\nvar _c;\n$RefreshReg$(_c, \"ConversationProvider\");","map":{"version":3,"names":["createContext","useContext","useState","LocalStorage","useContact","jsxDEV","_jsxDEV","ConversationContext","useConversation","_s","ConversationProvider","children","id","_s2","conversation","setConverstaion","selectConversationIndex","setSelectConversationIndex","contact","createConversation","recipients","prevconversation","messages","formattedConversations","map","index","recipientId","foundContact","find","name","selected","value","currentConversation","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/Components/context/ConversationProvider.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport LocalStorage from \"../Hooks/LocalStorage\";\nimport { useContact } from \"./ContactsProvider\";\n\n\n\nexport const ConversationContext = createContext();\n\n\nexport function useConversation(){\n    return useContext(ConversationContext);\n}\n\nexport function ConversationProvider({children,id}){\n    const [conversation,setConverstaion] = LocalStorage('conversation',[]);\n    const [selectConversationIndex,setSelectConversationIndex] = useState(0);\n    const {contact} = useContact();\n    function createConversation(recipients){\n        setConverstaion(prevconversation=>{\n            return[...prevconversation,{recipients,messages : []}]\n        })\n        \n    }\n\n    //Now we can format our conversation into easy manner \n    //As we know conversation has stored the group of recipeints ids \n    //First wee need to iterate the conversatinon and inside we need to iterate the recipuents and after we need to find the matching\n    //recipient id with contacts information we have \n    \n    const formattedConversations = conversation.map((conversation,index) => {\n        // For each conversation, process its recipients\n        const recipients = conversation.recipients.map(recipientId => {\n            // Find the contact that matches this recipient ID\n            const foundContact = contact.find(contact => contact.id === recipientId);\n            \n            // If contact found, use its name, otherwise use the ID as fallback\n            return {\n                id: recipientId,\n                name: foundContact ? foundContact.name : recipientId\n            };\n        });\n\n        //And also See this Current Conversation is selected \n        const selected  = index === selectConversationIndex;\n    \n        // Return a new conversation object with formatted recipients\n        return {\n            ...conversation, // Keep existing conversation properties\n            recipients, // Add formatted recipients array\n            selected //If this Conversation is selected\n        };\n    });\n    const value = {\n        conversation : formattedConversations,\n        currentConversation:formattedConversations[selectConversationIndex],//To Track the current conversatoin we are doing this \n        selectConversationIndex : setSelectConversationIndex,\n        createConversation\n    }\n    return(\n        <ConversationContext.Provider value={value}>\n        {children}\n        </ConversationContext.Provider>\n    )\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,OAAOC,YAAY,MAAM,uBAAuB;AAChD,SAASC,UAAU,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIhD,OAAO,MAAMC,mBAAmB,gBAAGP,aAAa,CAAC,CAAC;AAGlD,OAAO,SAASQ,eAAeA,CAAA,EAAE;EAAAC,EAAA;EAC7B,OAAOR,UAAU,CAACM,mBAAmB,CAAC;AAC1C;AAACE,EAAA,CAFeD,eAAe;AAI/B,OAAO,SAASE,oBAAoBA,CAAC;EAACC,QAAQ;EAACC;AAAE,CAAC,EAAC;EAAAC,GAAA;EAC/C,MAAM,CAACC,YAAY,EAACC,eAAe,CAAC,GAAGZ,YAAY,CAAC,cAAc,EAAC,EAAE,CAAC;EACtE,MAAM,CAACa,uBAAuB,EAACC,0BAA0B,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACxE,MAAM;IAACgB;EAAO,CAAC,GAAGd,UAAU,CAAC,CAAC;EAC9B,SAASe,kBAAkBA,CAACC,UAAU,EAAC;IACnCL,eAAe,CAACM,gBAAgB,IAAE;MAC9B,OAAM,CAAC,GAAGA,gBAAgB,EAAC;QAACD,UAAU;QAACE,QAAQ,EAAG;MAAE,CAAC,CAAC;IAC1D,CAAC,CAAC;EAEN;;EAEA;EACA;EACA;EACA;;EAEA,MAAMC,sBAAsB,GAAGT,YAAY,CAACU,GAAG,CAAC,CAACV,YAAY,EAACW,KAAK,KAAK;IACpE;IACA,MAAML,UAAU,GAAGN,YAAY,CAACM,UAAU,CAACI,GAAG,CAACE,WAAW,IAAI;MAC1D;MACA,MAAMC,YAAY,GAAGT,OAAO,CAACU,IAAI,CAACV,OAAO,IAAIA,OAAO,CAACN,EAAE,KAAKc,WAAW,CAAC;;MAExE;MACA,OAAO;QACHd,EAAE,EAAEc,WAAW;QACfG,IAAI,EAAEF,YAAY,GAAGA,YAAY,CAACE,IAAI,GAAGH;MAC7C,CAAC;IACL,CAAC,CAAC;;IAEF;IACA,MAAMI,QAAQ,GAAIL,KAAK,KAAKT,uBAAuB;;IAEnD;IACA,OAAO;MACH,GAAGF,YAAY;MAAE;MACjBM,UAAU;MAAE;MACZU,QAAQ,CAAC;IACb,CAAC;EACL,CAAC,CAAC;EACF,MAAMC,KAAK,GAAG;IACVjB,YAAY,EAAGS,sBAAsB;IACrCS,mBAAmB,EAACT,sBAAsB,CAACP,uBAAuB,CAAC;IAAC;IACpEA,uBAAuB,EAAGC,0BAA0B;IACpDE;EACJ,CAAC;EACD,oBACIb,OAAA,CAACC,mBAAmB,CAAC0B,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAApB,QAAA,EAC1CA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACqB,CAAC;AAEvC;AAACxB,GAAA,CAlDeH,oBAAoB;EAAA,QAGdN,UAAU;AAAA;AAAAkC,EAAA,GAHhB5B,oBAAoB;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}