{"ast":null,"code":"var _jsxFileName = \"/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Login from \"./Components/Login\";\nimport Dashboard from \"./Components/Dashboard\";\nimport { ContextContactProvider } from \"./Components/context/ContactsProvider\"; // Ensure correct import\nimport { setId } from \"./Components/Slice/IdSlice\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const userId = useSelector(state => state.userID); // Ensure the slice key is correct\n  const [showDashboard, setShowDashboard] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const storedUserId = localStorage.getItem(\"created-user-id\");\n    if (storedUserId) {\n      console.log(\"Logged storage:\", storedUserId);\n      dispatch(setId(storedUserId)); // Dispatch the ID to Redux store\n      setShowDashboard(true); // Show Dashboard if user ID exists in localStorage\n    } else if (userId) {\n      setShowDashboard(true); // Show Dashboard if user ID exists in Redux state\n    }\n  }, [userId, dispatch]); // Add dependencies to ensure updates\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showDashboard ? /*#__PURE__*/_jsxDEV(ContextContactProvider, {\n      children: /*#__PURE__*/_jsxDEV(Dashboard, {\n        id: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"17UdZpvFTfFdl+LYCER5YyH3wGs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","Login","Dashboard","ContextContactProvider","setId","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","userId","state","userID","showDashboard","setShowDashboard","dispatch","storedUserId","localStorage","getItem","console","log","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Login from \"./Components/Login\";\nimport Dashboard from \"./Components/Dashboard\";\nimport { ContextContactProvider } from \"./Components/context/ContactsProvider\"; // Ensure correct import\nimport { setId } from \"./Components/Slice/IdSlice\";\n\nfunction App() {\n  const userId = useSelector((state) => state.userID); // Ensure the slice key is correct\n  const [showDashboard, setShowDashboard] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const storedUserId = localStorage.getItem(\"created-user-id\");\n    if (storedUserId) {\n      console.log(\"Logged storage:\", storedUserId);\n      dispatch(setId(storedUserId)); // Dispatch the ID to Redux store\n      setShowDashboard(true); // Show Dashboard if user ID exists in localStorage\n    } else if (userId) {\n      setShowDashboard(true); // Show Dashboard if user ID exists in Redux state\n    }\n  }, [userId, dispatch]); // Add dependencies to ensure updates\n\n  return (\n    <>\n      {showDashboard ? (\n        <ContextContactProvider>\n          <Dashboard id={userId} />\n        </ContextContactProvider>\n      ) : (\n        <Login />\n      )}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAO,sCAAsC;AAE7C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,sBAAsB,QAAQ,uCAAuC,CAAC,CAAC;AAChF,SAASC,KAAK,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,MAAM,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC;EACrD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAMkB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMoB,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC5D,IAAIF,YAAY,EAAE;MAChBG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,YAAY,CAAC;MAC5CD,QAAQ,CAACZ,KAAK,CAACa,YAAY,CAAC,CAAC,CAAC,CAAC;MAC/BF,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM,IAAIJ,MAAM,EAAE;MACjBI,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACJ,MAAM,EAAEK,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExB,oBACEV,OAAA,CAAAE,SAAA;IAAAc,QAAA,EACGR,aAAa,gBACZR,OAAA,CAACH,sBAAsB;MAAAmB,QAAA,eACrBhB,OAAA,CAACJ,SAAS;QAACqB,EAAE,EAAEZ;MAAO;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAEzBrB,OAAA,CAACL,KAAK;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACT,gBACD,CAAC;AAEP;AAACjB,EAAA,CA3BQD,GAAG;EAAA,QACKT,WAAW,EAETD,WAAW;AAAA;AAAA6B,EAAA,GAHrBnB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}