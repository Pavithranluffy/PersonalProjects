{"ast":null,"code":"var _jsxFileName = \"/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/Components/ConversationModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Form, FormGroup, Modal } from \"react-bootstrap\";\nimport { useContact } from './context/ContactsProvider';\nimport { useConversation } from './context/ConversationProvider';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ConversationModal({\n  closeModal\n}) {\n  _s();\n  const [selectedcontactsid, setSelectedContactsids] = useState([]);\n  const {\n    contact\n  } = useContact();\n  const {\n    createConversation\n  } = useConversation();\n  function handleSubmit(e) {\n    e.preventDefault();\n    createConversation(selectedcontactsid);\n    closeModal;\n  }\n  function handleCheckchange(contactid) {\n    setSelectedContactsids(prevselectedcontactids => {\n      //First We are Checking that the contacts is already in the list \n      if (prevselectedcontactids.includes(contactid)) {\n        //if already there means we need to return the list by filtering it out which is already there \n        return prevselectedcontactids.filter(previd => {\n          return contactid !== previd;\n        });\n      } else {\n        return [...prevselectedcontactids, contactid];\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: \"Create Button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [contact.map(item => /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: item.id,\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            value: selectedcontactsid.includes(item.id),\n            onChange: () => handleCheckchange(item.id),\n            label: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"mt-2\",\n          type: \"submit\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(ConversationModal, \"K3VJEElEc1bh4Eq3CM5sd470CGY=\", false, function () {\n  return [useContact, useConversation];\n});\n_c = ConversationModal;\nvar _c;\n$RefreshReg$(_c, \"ConversationModal\");","map":{"version":3,"names":["React","useState","Button","Form","FormGroup","Modal","useContact","useConversation","jsxDEV","_jsxDEV","Fragment","_Fragment","ConversationModal","closeModal","_s","selectedcontactsid","setSelectedContactsids","contact","createConversation","handleSubmit","e","preventDefault","handleCheckchange","contactid","prevselectedcontactids","includes","filter","previd","children","Header","closeButton","fileName","_jsxFileName","lineNumber","columnNumber","Body","onSubmit","map","item","Group","controlId","id","Check","type","value","onChange","label","name","className","_c","$RefreshReg$"],"sources":["/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/Components/ConversationModal.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Form, FormGroup, Modal } from \"react-bootstrap\";\nimport { useContact } from './context/ContactsProvider';\nimport { useConversation } from './context/ConversationProvider';\nexport default function ConversationModal({closeModal}){\n    const [selectedcontactsid , setSelectedContactsids] = useState([]);\n    const {contact} = useContact();\n    const {createConversation} = useConversation();\n    function handleSubmit(e){\n        e.preventDefault();\n        createConversation(selectedcontactsid)\n        closeModal;\n\n    }\n    function handleCheckchange(contactid){\n        setSelectedContactsids(prevselectedcontactids =>{\n            //First We are Checking that the contacts is already in the list \n            if(prevselectedcontactids.includes(contactid)){\n                //if already there means we need to return the list by filtering it out which is already there \n                return prevselectedcontactids.filter(previd => {\n                    return contactid !== previd })\n\n                \n            }\n            else{\n                return [...prevselectedcontactids,contactid]\n            }\n        })\n\n    }\n    return(\n        <>\n        <Modal.Header closeButton>\n            Create Button\n        </Modal.Header>\n        <Modal.Body>\n            <Form onSubmit={handleSubmit}>{\n                contact.map(item =>(\n                    <Form.Group controlId={item.id} key={item.id}>\n                        <Form.Check\n                        type='checkbox'\n                        value={selectedcontactsid.includes(item.id)}\n                        onChange={() => handleCheckchange(item.id)}\n                        label={item.name}\n                        >\n\n                        </Form.Check>\n\n                    </Form.Group>\n                ))\n                }\n           \n                <Button className=\"mt-2\" type=\"submit\">\n                     Create\n                </Button>\n            </Form>\n        </Modal.Body>\n        \n        </>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}