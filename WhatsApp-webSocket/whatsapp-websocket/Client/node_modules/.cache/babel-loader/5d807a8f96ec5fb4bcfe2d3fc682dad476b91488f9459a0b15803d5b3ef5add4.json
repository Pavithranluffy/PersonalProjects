{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst PREFIX = \"Whatsapp-clone-\"; // Prefix for localStorage keys to avoid conflicts with other apps or data\n\n/**\n * Custom hook to manage localStorage with React state synchronization.\n * @param {string} key - The unique key for the localStorage item.\n * @param {*} initialValue - The initial value to be used if no value is found in localStorage.\n * @returns {[any, function]} - Returns the current value and a setter function to update it.\n */\nexport default function LocalStorage(key, initialValue) {\n  _s();\n  // Combine the prefix with the key to create a unique key for storage.\n  const prefixedKey = PREFIX + key;\n\n  // Initialize state by checking localStorage for the existing value.\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey); // Try to get the stored value from localStorage.\n    if (jsonValue != null) return JSON.parse(jsonValue); // If found, parse it from JSON and use it.\n\n    // If not found and the initial value is a function, call the function to get the value.\n    if (typeof initialValue === 'function') {\n      return initialValue();\n    } else {\n      // Otherwise, just use the initial value directly.\n      return initialValue;\n    }\n  });\n\n  // Update localStorage whenever `value` or `prefixedKey` changes.\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value)); // Store the value in localStorage as a JSON string.\n  }, [prefixedKey, value]); // Run this effect whenever the key or value changes.\n\n  // Return the current value and the setter function to update it.\n  return [value, setValue];\n}\n_s(LocalStorage, \"j2yONPjLu13rQapuBV0D3v/r1ME=\");\n_c = LocalStorage;\nvar _c;\n$RefreshReg$(_c, \"LocalStorage\");","map":{"version":3,"names":["useEffect","useState","PREFIX","LocalStorage","key","initialValue","_s","prefixedKey","value","setValue","jsonValue","localStorage","getItem","JSON","parse","setItem","stringify","_c","$RefreshReg$"],"sources":["/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/Components/Hooks/LocalStorage.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst PREFIX = \"Whatsapp-clone-\"; // Prefix for localStorage keys to avoid conflicts with other apps or data\n\n/**\n * Custom hook to manage localStorage with React state synchronization.\n * @param {string} key - The unique key for the localStorage item.\n * @param {*} initialValue - The initial value to be used if no value is found in localStorage.\n * @returns {[any, function]} - Returns the current value and a setter function to update it.\n */\nexport default function LocalStorage(key, initialValue) {\n    // Combine the prefix with the key to create a unique key for storage.\n    const prefixedKey = PREFIX + key;\n\n    // Initialize state by checking localStorage for the existing value.\n    const [value, setValue] = useState(() => {\n        const jsonValue = localStorage.getItem(prefixedKey); // Try to get the stored value from localStorage.\n        if (jsonValue != null) return JSON.parse(jsonValue); // If found, parse it from JSON and use it.\n        \n        // If not found and the initial value is a function, call the function to get the value.\n        if (typeof initialValue === 'function') {\n            return initialValue();\n        } else {\n            // Otherwise, just use the initial value directly.\n            return initialValue;\n        }\n    });\n\n    // Update localStorage whenever `value` or `prefixedKey` changes.\n    useEffect(() => {\n        localStorage.setItem(prefixedKey, JSON.stringify(value)); // Store the value in localStorage as a JSON string.\n    }, [prefixedKey, value]); // Run this effect whenever the key or value changes.\n\n    // Return the current value and the setter function to update it.\n    return [value, setValue];\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,MAAM,GAAG,iBAAiB,CAAC,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,YAAYA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,EAAA;EACpD;EACA,MAAMC,WAAW,GAAGL,MAAM,GAAGE,GAAG;;EAEhC;EACA,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,MAAM;IACrC,MAAMS,SAAS,GAAGC,YAAY,CAACC,OAAO,CAACL,WAAW,CAAC,CAAC,CAAC;IACrD,IAAIG,SAAS,IAAI,IAAI,EAAE,OAAOG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC,CAAC;;IAErD;IACA,IAAI,OAAOL,YAAY,KAAK,UAAU,EAAE;MACpC,OAAOA,YAAY,CAAC,CAAC;IACzB,CAAC,MAAM;MACH;MACA,OAAOA,YAAY;IACvB;EACJ,CAAC,CAAC;;EAEF;EACAL,SAAS,CAAC,MAAM;IACZW,YAAY,CAACI,OAAO,CAACR,WAAW,EAAEM,IAAI,CAACG,SAAS,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACD,WAAW,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;;EAE1B;EACA,OAAO,CAACA,KAAK,EAAEC,QAAQ,CAAC;AAC5B;AAACH,EAAA,CAzBuBH,YAAY;AAAAc,EAAA,GAAZd,YAAY;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}