{"ast":null,"code":"var _jsxFileName = \"/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/Components/context/ConversationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport LocalStorage from \"../Hooks/LocalStorage\";\nimport { useContact } from \"./ContactsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConversationContext = /*#__PURE__*/createContext();\nexport function useConversation() {\n  _s();\n  return useContext(ConversationContext);\n}\n_s(useConversation, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ConversationProvider({\n  children\n}) {\n  _s2();\n  const [conversation, setConverstaion] = LocalStorage('conversation', []);\n  const {\n    contact\n  } = useContact();\n  function createConversation(recipients) {\n    setConverstaion(prevconversation => {\n      return [...prevconversation, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  //Now we can format our conversation into easy manner \n  //As we know conversation has stored the group of recipeints ids \n  //First wee need to iterate the conversatinon and inside we need to iterate the recipuents and after we need to find the matching\n  //recipient id with contacts information we have \n\n  const formattedConversations = conversation.map(conversation => {\n    // For each conversation, process its recipients\n    const recipients = conversation.recipients.map(recipientId => {\n      // Find the contact that matches this recipient ID\n      const foundContact = contact.find(contact => contact.id === recipientId);\n\n      // If contact found, use its name, otherwise use the ID as fallback\n      return {\n        id: recipientId,\n        name: foundContact ? foundContact.name : recipientId\n      };\n    });\n\n    // Return a new conversation object with formatted recipients\n    return {\n      ...conversation,\n      // Keep existing conversation properties\n      recipients // Add formatted recipients array\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(ConversationContext.Provider, {\n    value: {\n      conversation,\n      createConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s2(ConversationProvider, \"Ff+UEbuFVTyhISuYsJQb9KeR5VE=\", false, function () {\n  return [useContact];\n});\n_c = ConversationProvider;\nvar _c;\n$RefreshReg$(_c, \"ConversationProvider\");","map":{"version":3,"names":["createContext","useContext","useState","LocalStorage","useContact","jsxDEV","_jsxDEV","ConversationContext","useConversation","_s","ConversationProvider","children","_s2","conversation","setConverstaion","contact","createConversation","recipients","prevconversation","messages","formattedConversations","map","recipientId","foundContact","find","id","name","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pavithranr/Documents/MyProjects-Git/WhatsApp-webSocket/whatsapp-websocket/src/Components/context/ConversationProvider.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport LocalStorage from \"../Hooks/LocalStorage\";\nimport { useContact } from \"./ContactsProvider\";\n\n\n\nexport const ConversationContext = createContext();\n\n\nexport function useConversation(){\n    return useContext(ConversationContext);\n}\n\nexport function ConversationProvider({children}){\n    const [conversation,setConverstaion] = LocalStorage('conversation',[]);\n    const {contact} = useContact();\n    function createConversation(recipients){\n        setConverstaion(prevconversation=>{\n            return[...prevconversation,{recipients,messages : []}]\n        })\n        \n    }\n\n    //Now we can format our conversation into easy manner \n    //As we know conversation has stored the group of recipeints ids \n    //First wee need to iterate the conversatinon and inside we need to iterate the recipuents and after we need to find the matching\n    //recipient id with contacts information we have \n    \n    const formattedConversations = conversation.map(conversation => {\n        // For each conversation, process its recipients\n        const recipients = conversation.recipients.map(recipientId => {\n            // Find the contact that matches this recipient ID\n            const foundContact = contact.find(contact => contact.id === recipientId);\n            \n            // If contact found, use its name, otherwise use the ID as fallback\n            return {\n                id: recipientId,\n                name: foundContact ? foundContact.name : recipientId\n            };\n        });\n    \n        // Return a new conversation object with formatted recipients\n        return {\n            ...conversation, // Keep existing conversation properties\n            recipients // Add formatted recipients array\n        };\n    });\n    return(\n        <ConversationContext.Provider value={{conversation,createConversation}}>\n        {children}\n        </ConversationContext.Provider>\n    )\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,OAAOC,YAAY,MAAM,uBAAuB;AAChD,SAASC,UAAU,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIhD,OAAO,MAAMC,mBAAmB,gBAAGP,aAAa,CAAC,CAAC;AAGlD,OAAO,SAASQ,eAAeA,CAAA,EAAE;EAAAC,EAAA;EAC7B,OAAOR,UAAU,CAACM,mBAAmB,CAAC;AAC1C;AAACE,EAAA,CAFeD,eAAe;AAI/B,OAAO,SAASE,oBAAoBA,CAAC;EAACC;AAAQ,CAAC,EAAC;EAAAC,GAAA;EAC5C,MAAM,CAACC,YAAY,EAACC,eAAe,CAAC,GAAGX,YAAY,CAAC,cAAc,EAAC,EAAE,CAAC;EACtE,MAAM;IAACY;EAAO,CAAC,GAAGX,UAAU,CAAC,CAAC;EAC9B,SAASY,kBAAkBA,CAACC,UAAU,EAAC;IACnCH,eAAe,CAACI,gBAAgB,IAAE;MAC9B,OAAM,CAAC,GAAGA,gBAAgB,EAAC;QAACD,UAAU;QAACE,QAAQ,EAAG;MAAE,CAAC,CAAC;IAC1D,CAAC,CAAC;EAEN;;EAEA;EACA;EACA;EACA;;EAEA,MAAMC,sBAAsB,GAAGP,YAAY,CAACQ,GAAG,CAACR,YAAY,IAAI;IAC5D;IACA,MAAMI,UAAU,GAAGJ,YAAY,CAACI,UAAU,CAACI,GAAG,CAACC,WAAW,IAAI;MAC1D;MACA,MAAMC,YAAY,GAAGR,OAAO,CAACS,IAAI,CAACT,OAAO,IAAIA,OAAO,CAACU,EAAE,KAAKH,WAAW,CAAC;;MAExE;MACA,OAAO;QACHG,EAAE,EAAEH,WAAW;QACfI,IAAI,EAAEH,YAAY,GAAGA,YAAY,CAACG,IAAI,GAAGJ;MAC7C,CAAC;IACL,CAAC,CAAC;;IAEF;IACA,OAAO;MACH,GAAGT,YAAY;MAAE;MACjBI,UAAU,CAAC;IACf,CAAC;EACL,CAAC,CAAC;EACF,oBACIX,OAAA,CAACC,mBAAmB,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAACf,YAAY;MAACG;IAAkB,CAAE;IAAAL,QAAA,EACtEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACqB,CAAC;AAEvC;AAACpB,GAAA,CAvCeF,oBAAoB;EAAA,QAEdN,UAAU;AAAA;AAAA6B,EAAA,GAFhBvB,oBAAoB;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}